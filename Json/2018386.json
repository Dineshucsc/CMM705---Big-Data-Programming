{"paragraphs":[{"text":"%pyspark\n#### Q2.3\n\n# redaing the csv file into a spark datafarme\n#df = spark.read.csv(\"/resources/listings.csv\", header=\"true\", inferSchema=\"true\")\ndf = spark.read.format('csv').options(header='true', inferSchema='true').load('/resources/listings1.csv')\n# show the first ten lines of the dataframe\ndf.head(10)","user":"anonymous","dateUpdated":"2020-01-11T15:17:29+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[Row(id=u'49091', name=u'COZICOMFORT LONG TERM STAY ROOM 2', host_id=u'266763', host_name=u'Francesca', neighbourhood_group=u'North Region', neighbourhood=u'Woodlands', latitude=1.44255, longitude=u'103.7958', room_type=u'Private room', price=83, minimum_nights=180, number_of_reviews=u'1', last_review=u'2013-10-21', reviews_per_month=0.01, calculated_host_listings_count=2, availability_365=365),\n Row(id=u'50646', name=u'Pleasant Room along Bukit Timah', host_id=u'227796', host_name=u'Sujatha', neighbourhood_group=u'Central Region', neighbourhood=u'Bukit Timah', latitude=1.33235, longitude=u'103.78521', room_type=u'Private room', price=81, minimum_nights=90, number_of_reviews=u'18', last_review=u'2014-12-26', reviews_per_month=0.28, calculated_host_listings_count=1, availability_365=365),\n Row(id=u'56334', name=u'COZICOMFORT', host_id=u'266763', host_name=u'Francesca', neighbourhood_group=u'North Region', neighbourhood=u'Woodlands', latitude=1.44246, longitude=u'103.79667', room_type=u'Private room', price=69, minimum_nights=6, number_of_reviews=u'20', last_review=u'2015-10-01', reviews_per_month=0.2, calculated_host_listings_count=2, availability_365=365),\n Row(id=u'71609', name=u'Ensuite Room (Room 1 & 2) near EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34541, longitude=u'103.95712', room_type=u'Private room', price=206, minimum_nights=1, number_of_reviews=u'14', last_review=u'2019-08-11', reviews_per_month=0.15, calculated_host_listings_count=9, availability_365=353),\n Row(id=u'71896', name=u'B&B  Room 1 near Airport & EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34567, longitude=u'103.95963', room_type=u'Private room', price=94, minimum_nights=1, number_of_reviews=u'22', last_review=u'2019-07-28', reviews_per_month=0.22, calculated_host_listings_count=9, availability_365=355),\n Row(id=u'71903', name=u'Room 2-near Airport & EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34702, longitude=u'103.96103', room_type=u'Private room', price=104, minimum_nights=1, number_of_reviews=u'39', last_review=u'2019-08-15', reviews_per_month=0.38, calculated_host_listings_count=9, availability_365=346),\n Row(id=u'71907', name=u'3rd level Jumbo room 5 near EXPO', host_id=u'367042', host_name=u'Belinda', neighbourhood_group=u'East Region', neighbourhood=u'Tampines', latitude=1.34348, longitude=u'103.96337', room_type=u'Private room', price=208, minimum_nights=1, number_of_reviews=u'25', last_review=u'2019-07-25', reviews_per_month=0.25, calculated_host_listings_count=9, availability_365=172),\n Row(id=u'241503', name=u'\"Long stay at The Breezy East \"\"Leopard\"\"\"', host_id=u'1017645', host_name=u'Bianca', neighbourhood_group=u'East Region', neighbourhood=u'Bedok', latitude=1.32304, longitude=u'103.91363', room_type=u'Private room', price=50, minimum_nights=90, number_of_reviews=u'174', last_review=u'2019-05-31', reviews_per_month=1.88, calculated_host_listings_count=4, availability_365=59),\n Row(id=u'241508', name=u'\"Long stay at The Breezy East \"\"Plumeria\"\"\"', host_id=u'1017645', host_name=u'Bianca', neighbourhood_group=u'East Region', neighbourhood=u'Bedok', latitude=1.32458, longitude=u'103.91163', room_type=u'Private room', price=54, minimum_nights=90, number_of_reviews=u'198', last_review=u'2019-04-28', reviews_per_month=2.08, calculated_host_listings_count=4, availability_365=133),\n Row(id=u'241510', name=u'\"Long stay at The Breezy East \"\"Red Palm\"\"\"', host_id=u'1017645', host_name=u'Bianca', neighbourhood_group=u'East Region', neighbourhood=u'Bedok', latitude=1.32461, longitude=u'103.91191', room_type=u'Private room', price=42, minimum_nights=90, number_of_reviews=u'236', last_review=u'2019-07-31', reviews_per_month=2.53, calculated_host_listings_count=4, availability_365=147)]"}]},"apps":[],"jobName":"paragraph_1578755774423_1848688635","id":"20200110-181216_1247419868","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:165","dateFinished":"2020-01-11T15:21:30+0000","dateStarted":"2020-01-11T15:17:30+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=0","http://172.17.0.2:4040/jobs/job?id=1","http://172.17.0.2:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n##Q2.3.1\nfrom pyspark.sql import *\n\n#DataFrame as a SQL temporary view\ndf.createOrReplaceTempView(\"tmp_view\")\n#df.show()\n# total number of property owners \nnum_owners = spark.sql(\"select host_id, host_name, COUNT(*) as no_of_prop from tmp_view group by host_id, host_name Order by no_of_prop DESC\")\n# print(num_owners.show())\n ##Get the owners total\nno_of_owners=num_owners.count()\nmulti_prop_owners = spark.sql(\"select host_id, host_name, COUNT(*) as no_of_prop from tmp_view group by host_id, host_name HAVING no_of_prop>1 Order by no_of_prop DESC\")\nmulti_count = multi_prop_owners.count()\npercentage = (float(multi_count)/no_of_owners)*100.0\nprint(\"Percentage of owners who rent more than one property: \")\nprint(percentage)\n","user":"anonymous","dateUpdated":"2020-01-11T15:22:01+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Percentage of owners who rent more than one property: \n27.3163528977\n"}]},"apps":[],"jobName":"paragraph_1578755774498_2044641578","id":"20200110-181221_484282037","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:166","dateFinished":"2020-01-11T15:24:04+0000","dateStarted":"2020-01-11T15:22:01+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=3","http://172.17.0.2:4040/jobs/job?id=4","http://172.17.0.2:4040/jobs/job?id=5","http://172.17.0.2:4040/jobs/job?id=6"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q2.3.2\nimport pandas as pd \nfrom pyspark.sql.functions import *\n\n\nreviewDf = spark.sql(\"Select month(last_review) month, count(*) as no_of_review from tmp_view where month(last_review) is not null group by month order by month\")\nprint(reviewDf.show())\n\nplotting = reviewDf.toPandas()\nhistPlot = plotting.plot.bar(x='month', y='no_of_review', color='b')","user":"anonymous","dateUpdated":"2020-01-11T16:58:57+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+------------+\n|month|no_of_review|\n+-----+------------+\n|    1|         241|\n|    2|         236|\n|    3|         235|\n|    4|         249|\n|    5|         334|\n|    6|         455|\n|    7|         983|\n|    8|        1822|\n|    9|         149|\n|   10|         125|\n|   11|         111|\n|   12|         201|\n+-----+------------+\n\nNone\n\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7f076a26c410>"}]},"apps":[],"jobName":"paragraph_1578755774504_188806637","id":"20200111-012525_348639644","dateCreated":"2020-01-11T15:16:14+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:167"},{"text":"%pyspark\n#Q 2.3.3\n\ndailyOpen = spark.sql(\"Select * from tmp_view where availability_365 =365\")\ndailyOpen.createOrReplaceTempView(\"365_days_open\")\ntop5AvgRentals = spark.sql(\"Select neighbourhood_group, neighbourhood, count(*) as count from 365_days_open where neighbourhood in (Select neighbourhood from 365_days_open Group By neighbourhood_group, neighbourhood order By avg(price) Limit 5) group by neighbourhood_group, neighbourhood\")\n\ntop5AvgRentals.show()","user":"anonymous","dateUpdated":"2020-01-11T17:14:56+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+-----+\n|neighbourhood_group|       neighbourhood|count|\n+-------------------+--------------------+-----+\n|        West Region|Western Water Cat...|    1|\n|        West Region|       Bukit Panjang|    1|\n|       North Region|           Woodlands|   12|\n|  North-East Region|           Serangoon|    8|\n|       North Region|        Lim Chu Kang|    1|\n+-------------------+--------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1578755774521_1182775426","id":"20200111-014156_1566270283","dateCreated":"2020-01-11T15:16:14+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:168"},{"text":"%pyspark\n# 3. loading ML Libs\nfrom pyspark.sql import SparkSession, Row, functions, types\nfrom pyspark.sql.functions import udf\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom pyspark.ml.feature import HashingTF, IDF, Tokenizer, VectorAssembler, StringIndexer\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.ml.classification import NaiveBayes\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.linalg import Vectors\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD\nfrom pyspark.sql.functions import col\nimport pandas as pd \nimport numpy as np \nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import when\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import lit\nfrom datetime import date\nfrom pyspark.sql.types import StructField\nfrom pyspark.sql.types import StructType\nfrom pyspark.sql.types import *\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD","user":"anonymous","dateUpdated":"2020-01-11T17:31:38+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1578755774527_-53450936","id":"20200111-022856_786612274","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:169","dateFinished":"2020-01-11T15:24:13+0000","dateStarted":"2020-01-11T15:22:26+0000"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-01-11T17:31:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578763918082_-1888955922","id":"20200111-173158_1420134246","dateCreated":"2020-01-11T17:31:58+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2986"},{"text":"%pyspark\n\n#needed columns\ncols=['id','latitude','longitude','neighbourhood_group']\ndf_training = df.select(cols)\n#df_training.show()\ndf_training = df_training.na.drop()\ndf_training = df_training.withColumn(\"longitude\", df_training[\"longitude\"].cast(DoubleType()))\ndf_training.printSchema()\n\ndf_training.createOrReplaceTempView(\"listings_cols\")\n\ndf1_training = spark.sql(\"select neighbourhood_group, count(id) id_count from listings_cols group by neighbourhood_group order by id_count DESC\")\ndf1_training.show()\n\n#ignore minimul popular regions\ndef valueToInt(value):\n    if value=='Central Region': return 1\n    elif value=='East Region': return 2\n    elif value=='North Region': return 3\n    elif value=='North-East Region': return 4\n    elif value=='West Region': return  5\n    else: return 6\n    \nudfValueToInt = udf(valueToInt, IntegerType())\ndf1_training = df_training.withColumn(\"label_column\", udfValueToInt(\"neighbourhood_group\"))\n\ndf2_training = df1_training.filter(df1_training['label_column'] < 6)\ndf2_training.show()","user":"anonymous","dateUpdated":"2020-01-11T17:36:05+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":444.028,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- id: string (nullable = true)\n |-- latitude: double (nullable = true)\n |-- longitude: double (nullable = true)\n |-- neighbourhood_group: string (nullable = true)\n\n+-------------------+--------+\n|neighbourhood_group|id_count|\n+-------------------+--------+\n|     Central Region|    6301|\n|        West Region|     539|\n|        East Region|     508|\n|  North-East Region|     344|\n|       North Region|     203|\n|             Museum|       2|\n|      Downtown Core|       2|\n|        Jurong West|       1|\n|            Orchard|       1|\n|             Rochor|       1|\n|        Bukit Merah|       1|\n|            Punggol|       1|\n|          Sembawang|       1|\n|            Hougang|       1|\n|   Southern Islands|       1|\n+-------------------+--------+\n\n+------+--------+---------+-------------------+------------+\n|    id|latitude|longitude|neighbourhood_group|label_column|\n+------+--------+---------+-------------------+------------+\n| 49091| 1.44255| 103.7958|       North Region|           3|\n| 50646| 1.33235|103.78521|     Central Region|           1|\n| 56334| 1.44246|103.79667|       North Region|           3|\n| 71609| 1.34541|103.95712|        East Region|           2|\n| 71896| 1.34567|103.95963|        East Region|           2|\n| 71903| 1.34702|103.96103|        East Region|           2|\n| 71907| 1.34348|103.96337|        East Region|           2|\n|241503| 1.32304|103.91363|        East Region|           2|\n|241508| 1.32458|103.91163|        East Region|           2|\n|241510| 1.32461|103.91191|        East Region|           2|\n|275343| 1.28875|103.80814|     Central Region|           1|\n|275344| 1.28837|103.81099|     Central Region|           1|\n|289234| 1.34561|103.95984|        East Region|           2|\n|294281| 1.31125|103.83816|     Central Region|           1|\n|324945| 1.28976|103.80896|     Central Region|           1|\n|330089| 1.28677|103.81244|     Central Region|           1|\n|330095| 1.28537|103.81087|     Central Region|           1|\n|344803| 1.34943|103.95951|        East Region|           2|\n|355955|  1.3142|103.90232|     Central Region|           1|\n|369141|  1.3115|103.83759|     Central Region|           1|\n+------+--------+---------+-------------------+------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1578755774541_1796650599","id":"20200111-023334_2108893761","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:170","dateFinished":"2020-01-11T17:36:36+0000","dateStarted":"2020-01-11T17:36:05+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=89","http://172.17.0.2:4040/jobs/job?id=90"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\ndef vectorAssembler(df,impFeatures):\n\tprint(\" vectorAssembler start.. \")\n\tassembler = VectorAssembler(inputCols=impFeatures,outputCol=\"features\")\n\tdf_new=assembler.transform(df)\n\tprint(\"vectorAssemblers done.\")\n\treturn df_new\nimpCols=['latitude','longitude']\nimpdf = df2_training.select(impCols).show()\n# Create one feature vector column using latitude and longitude \ndtf=vectorAssembler(df2_training,impCols)\ndtf.show()\n\nfinalized_data = dtf.select('label_column', 'features')\nfrom pyspark.ml.feature import StandardScaler\nscaler = StandardScaler(inputCol='features', outputCol='scaledFeatures', withStd=True, withMean=True)\nscalerModel = scaler.fit(finalized_data)\nclassiFinalData = scalerModel.transform(finalized_data)\n\n# Split the data into training and test sets (20% held out for testing)\n(trainingData, testData) = classiFinalData.randomSplit([0.8, 0.2])\n\ntrainingData.show()","user":"anonymous","dateUpdated":"2020-01-11T17:38:03+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+---------+\n|latitude|longitude|\n+--------+---------+\n| 1.44255| 103.7958|\n| 1.33235|103.78521|\n| 1.44246|103.79667|\n| 1.34541|103.95712|\n| 1.34567|103.95963|\n| 1.34702|103.96103|\n| 1.34348|103.96337|\n| 1.32304|103.91363|\n| 1.32458|103.91163|\n| 1.32461|103.91191|\n| 1.28875|103.80814|\n| 1.28837|103.81099|\n| 1.34561|103.95984|\n| 1.31125|103.83816|\n| 1.28976|103.80896|\n| 1.28677|103.81244|\n| 1.28537|103.81087|\n| 1.34943|103.95951|\n|  1.3142|103.90232|\n|  1.3115|103.83759|\n+--------+---------+\nonly showing top 20 rows\n\n vectorAssembler start.. \nvectorAssemblers done.\n+------+--------+---------+-------------------+------------+-------------------+\n|    id|latitude|longitude|neighbourhood_group|label_column|           features|\n+------+--------+---------+-------------------+------------+-------------------+\n| 49091| 1.44255| 103.7958|       North Region|           3| [1.44255,103.7958]|\n| 50646| 1.33235|103.78521|     Central Region|           1|[1.33235,103.78521]|\n| 56334| 1.44246|103.79667|       North Region|           3|[1.44246,103.79667]|\n| 71609| 1.34541|103.95712|        East Region|           2|[1.34541,103.95712]|\n| 71896| 1.34567|103.95963|        East Region|           2|[1.34567,103.95963]|\n| 71903| 1.34702|103.96103|        East Region|           2|[1.34702,103.96103]|\n| 71907| 1.34348|103.96337|        East Region|           2|[1.34348,103.96337]|\n|241503| 1.32304|103.91363|        East Region|           2|[1.32304,103.91363]|\n|241508| 1.32458|103.91163|        East Region|           2|[1.32458,103.91163]|\n|241510| 1.32461|103.91191|        East Region|           2|[1.32461,103.91191]|\n|275343| 1.28875|103.80814|     Central Region|           1|[1.28875,103.80814]|\n|275344| 1.28837|103.81099|     Central Region|           1|[1.28837,103.81099]|\n|289234| 1.34561|103.95984|        East Region|           2|[1.34561,103.95984]|\n|294281| 1.31125|103.83816|     Central Region|           1|[1.31125,103.83816]|\n|324945| 1.28976|103.80896|     Central Region|           1|[1.28976,103.80896]|\n|330089| 1.28677|103.81244|     Central Region|           1|[1.28677,103.81244]|\n|330095| 1.28537|103.81087|     Central Region|           1|[1.28537,103.81087]|\n|344803| 1.34943|103.95951|        East Region|           2|[1.34943,103.95951]|\n|355955|  1.3142|103.90232|     Central Region|           1| [1.3142,103.90232]|\n|369141|  1.3115|103.83759|     Central Region|           1| [1.3115,103.83759]|\n+------+--------+---------+-------------------+------------+-------------------+\nonly showing top 20 rows\n\n+------------+-------------------+--------------------+\n|label_column|           features|      scaledFeatures|\n+------------+-------------------+--------------------+\n|           1|[1.24387,103.84246]|[-2.3040593559511...|\n|           1|[1.24391,103.83915]|[-2.3027486080223...|\n|           1|[1.24526,103.83999]|[-2.2585108654236...|\n|           1|[1.24881,103.82364]|[-2.1421819867381...|\n|           1|[1.24918,103.82509]|[-2.1300575683962...|\n|           1|[1.24992,103.82441]|[-2.1058087317125...|\n|           1| [1.2504,103.82539]|[-2.0900797565663...|\n|           1|[1.25088,103.82482]|[-2.0743507814200...|\n|           1|[1.25284,103.82225]|[-2.0101241329064...|\n|           1|[1.25306,103.82268]|[-2.0029150192977...|\n|           1|  [1.25602,103.821]|[-1.9059196725627...|\n|           1|[1.26478,103.81762]|[-1.6188658761444...|\n|           1|[1.26513,103.81722]|[-1.6073968317669...|\n|           1|[1.26582,103.81531]|[-1.5847864299943...|\n|           1|[1.26603,103.81693]|[-1.5779050033678...|\n|           1|[1.26624,103.81097]|[-1.5710235767413...|\n|           1| [1.2666,103.81597]|[-1.5592268453817...|\n|           1|[1.26666,103.81507]|[-1.5572607234884...|\n|           1| [1.2667,103.81127]|[-1.5559499755596...|\n|           1|[1.26675,103.81219]|[-1.5543115406485...|\n+------------+-------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1578755774552_155572968","id":"20200111-024353_943538626","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:171","dateFinished":"2020-01-11T17:38:28+0000","dateStarted":"2020-01-11T17:38:03+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=91","http://172.17.0.2:4040/jobs/job?id=92","http://172.17.0.2:4040/jobs/job?id=93","http://172.17.0.2:4040/jobs/job?id=94"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\ndef Training(trainDF):\n\tprint(\"Training started\")\n\tlr = LogisticRegression(labelCol=\"label_column\", featuresCol=\"scaledFeatures\",elasticNetParam=0.8, family=\"multinomial\",maxIter=100)\n\tmodel=lr.fit(trainDF)\n\tprint(\"Training completed\")\n\treturn model \n\t\nmodel = Training(trainingData)\n\n# Get predictions.\npredictions = model.transform(testData)\n\n# Predicted data \npredictions.select(\"prediction\", \"label_column\", \"features\").show(100)","user":"anonymous","dateUpdated":"2020-01-11T17:38:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Training started\nTraining completed\n+----------+------------+-------------------+\n|prediction|label_column|           features|\n+----------+------------+-------------------+\n|       1.0|           1|[1.24847,103.82389]|\n|       1.0|           1|[1.24853,103.82502]|\n|       1.0|           1|[1.25046,103.82529]|\n|       1.0|           1|[1.25054,103.82551]|\n|       1.0|           1|[1.25639,103.82302]|\n|       1.0|           1| [1.26504,103.8146]|\n|       1.0|           1|[1.26569,103.81606]|\n|       1.0|           1|[1.26649,103.81585]|\n|       1.0|           1|[1.26713,103.81156]|\n|       1.0|           1|[1.26737,103.81082]|\n|       1.0|           1|[1.26814,103.81203]|\n|       1.0|           1|[1.26983,103.81331]|\n|       1.0|           1|  [1.272,103.82188]|\n|       1.0|           1| [1.27255,103.8346]|\n|       1.0|           1|[1.27279,103.83454]|\n|       1.0|           1|[1.27283,103.83222]|\n|       1.0|           1| [1.27345,103.8458]|\n|       1.0|           1|[1.27346,103.83513]|\n|       1.0|           1| [1.2735,103.84547]|\n|       1.0|           1|[1.27357,103.84428]|\n|       1.0|           1|[1.27369,103.83393]|\n|       1.0|           1|[1.27377,103.84405]|\n|       1.0|           1|[1.27378,103.83247]|\n|       1.0|           1|[1.27398,103.84553]|\n|       1.0|           1|[1.27399,103.84649]|\n|       1.0|           1|[1.27406,103.84564]|\n|       1.0|           1|[1.27408,103.84478]|\n|       1.0|           1|[1.27424,103.83315]|\n|       1.0|           1|[1.27434,103.83583]|\n|       1.0|           1| [1.27436,103.8459]|\n|       1.0|           1|[1.27456,103.84727]|\n|       1.0|           1|[1.27457,103.84322]|\n|       1.0|           1| [1.27459,103.8438]|\n|       1.0|           1|[1.27463,103.84528]|\n|       1.0|           1|[1.27478,103.84455]|\n|       1.0|           1|[1.27488,103.84559]|\n|       1.0|           1|[1.27495,103.83571]|\n|       1.0|           1|[1.27495,103.83695]|\n|       1.0|           1|[1.27498,103.84549]|\n|       1.0|           1|[1.27501,103.84558]|\n|       1.0|           1|[1.27518,103.84643]|\n|       1.0|           1|[1.27519,103.84359]|\n|       1.0|           1|[1.27519,103.84396]|\n|       1.0|           1|[1.27522,103.84696]|\n|       1.0|           1|[1.27527,103.84562]|\n|       1.0|           1|[1.27532,103.84511]|\n|       1.0|           1|[1.27537,103.84564]|\n|       1.0|           1|[1.27551,103.84515]|\n|       1.0|           1|[1.27557,103.84749]|\n|       1.0|           1|[1.27566,103.83671]|\n|       1.0|           1|[1.27567,103.85347]|\n|       1.0|           1| [1.2757,103.83485]|\n|       1.0|           1|[1.27583,103.83579]|\n|       1.0|           1|[1.27608,103.84363]|\n|       1.0|           1|[1.27616,103.83657]|\n|       1.0|           1| [1.2763,103.84528]|\n|       1.0|           1|[1.27632,103.83441]|\n|       1.0|           1|[1.27661,103.83842]|\n|       1.0|           1|[1.27674,103.85535]|\n|       1.0|           1|[1.27677,103.84651]|\n|       1.0|           1|[1.27686,103.84835]|\n|       1.0|           1|[1.27704,103.78563]|\n|       1.0|           1|[1.27705,103.84905]|\n|       1.0|           1|[1.27707,103.84808]|\n|       1.0|           1|[1.27743,103.83832]|\n|       1.0|           1| [1.27746,103.8245]|\n|       1.0|           1|[1.27749,103.84238]|\n|       1.0|           1|[1.27757,103.84141]|\n|       1.0|           1|[1.27784,103.84487]|\n|       1.0|           1|[1.27793,103.85221]|\n|       1.0|           1|[1.27794,103.85011]|\n|       1.0|           1|[1.27822,103.84944]|\n|       1.0|           1|[1.27832,103.83774]|\n|       1.0|           1|[1.27845,103.84168]|\n|       1.0|           1|[1.27848,103.84168]|\n|       1.0|           1|[1.27851,103.84739]|\n|       1.0|           1| [1.2786,103.84256]|\n|       1.0|           1| [1.27888,103.8435]|\n|       1.0|           1|[1.27941,103.84325]|\n|       1.0|           1|[1.27952,103.78728]|\n|       1.0|           1| [1.27964,103.7856]|\n|       1.0|           1|[1.27973,103.78751]|\n|       1.0|           1|[1.27974,103.84091]|\n|       1.0|           1|[1.27981,103.78604]|\n|       1.0|           1|[1.27991,103.81808]|\n|       1.0|           1|[1.27993,103.84882]|\n|       1.0|           1|[1.27996,103.85209]|\n|       1.0|           1|[1.27998,103.84744]|\n|       1.0|           1|[1.28006,103.85371]|\n|       1.0|           1|[1.28012,103.78677]|\n|       1.0|           1| [1.28016,103.8536]|\n|       1.0|           1|[1.28034,103.78605]|\n|       1.0|           1| [1.28035,103.8491]|\n|       1.0|           1|[1.28043,103.84864]|\n|       1.0|           1|[1.28076,103.79176]|\n|       1.0|           1|[1.28084,103.82894]|\n|       1.0|           1|[1.28093,103.85346]|\n|       1.0|           1|[1.28099,103.78738]|\n|       1.0|           1|[1.28099,103.84635]|\n|       1.0|           1|[1.28103,103.84626]|\n+----------+------------+-------------------+\nonly showing top 100 rows\n\n"}]},"apps":[],"jobName":"paragraph_1578755774558_654256494","id":"20200111-025013_1438738905","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:172","dateFinished":"2020-01-11T17:39:31+0000","dateStarted":"2020-01-11T17:38:34+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=95","http://172.17.0.2:4040/jobs/job?id=96","http://172.17.0.2:4040/jobs/job?id=97","http://172.17.0.2:4040/jobs/job?id=98","http://172.17.0.2:4040/jobs/job?id=99","http://172.17.0.2:4040/jobs/job?id=100","http://172.17.0.2:4040/jobs/job?id=101","http://172.17.0.2:4040/jobs/job?id=102","http://172.17.0.2:4040/jobs/job?id=103","http://172.17.0.2:4040/jobs/job?id=104","http://172.17.0.2:4040/jobs/job?id=105","http://172.17.0.2:4040/jobs/job?id=106","http://172.17.0.2:4040/jobs/job?id=107","http://172.17.0.2:4040/jobs/job?id=108","http://172.17.0.2:4040/jobs/job?id=109","http://172.17.0.2:4040/jobs/job?id=110","http://172.17.0.2:4040/jobs/job?id=111","http://172.17.0.2:4040/jobs/job?id=112","http://172.17.0.2:4040/jobs/job?id=113","http://172.17.0.2:4040/jobs/job?id=114","http://172.17.0.2:4040/jobs/job?id=115","http://172.17.0.2:4040/jobs/job?id=116","http://172.17.0.2:4040/jobs/job?id=117","http://172.17.0.2:4040/jobs/job?id=118","http://172.17.0.2:4040/jobs/job?id=119","http://172.17.0.2:4040/jobs/job?id=120","http://172.17.0.2:4040/jobs/job?id=121","http://172.17.0.2:4040/jobs/job?id=122","http://172.17.0.2:4040/jobs/job?id=123","http://172.17.0.2:4040/jobs/job?id=124","http://172.17.0.2:4040/jobs/job?id=125","http://172.17.0.2:4040/jobs/job?id=126","http://172.17.0.2:4040/jobs/job?id=127","http://172.17.0.2:4040/jobs/job?id=128","http://172.17.0.2:4040/jobs/job?id=129","http://172.17.0.2:4040/jobs/job?id=130","http://172.17.0.2:4040/jobs/job?id=131","http://172.17.0.2:4040/jobs/job?id=132","http://172.17.0.2:4040/jobs/job?id=133","http://172.17.0.2:4040/jobs/job?id=134","http://172.17.0.2:4040/jobs/job?id=135","http://172.17.0.2:4040/jobs/job?id=136","http://172.17.0.2:4040/jobs/job?id=137","http://172.17.0.2:4040/jobs/job?id=138","http://172.17.0.2:4040/jobs/job?id=139","http://172.17.0.2:4040/jobs/job?id=140","http://172.17.0.2:4040/jobs/job?id=141","http://172.17.0.2:4040/jobs/job?id=142","http://172.17.0.2:4040/jobs/job?id=143","http://172.17.0.2:4040/jobs/job?id=144","http://172.17.0.2:4040/jobs/job?id=145","http://172.17.0.2:4040/jobs/job?id=146","http://172.17.0.2:4040/jobs/job?id=147","http://172.17.0.2:4040/jobs/job?id=148","http://172.17.0.2:4040/jobs/job?id=149","http://172.17.0.2:4040/jobs/job?id=150","http://172.17.0.2:4040/jobs/job?id=151","http://172.17.0.2:4040/jobs/job?id=152","http://172.17.0.2:4040/jobs/job?id=153","http://172.17.0.2:4040/jobs/job?id=154","http://172.17.0.2:4040/jobs/job?id=155","http://172.17.0.2:4040/jobs/job?id=156","http://172.17.0.2:4040/jobs/job?id=157","http://172.17.0.2:4040/jobs/job?id=158","http://172.17.0.2:4040/jobs/job?id=159","http://172.17.0.2:4040/jobs/job?id=160","http://172.17.0.2:4040/jobs/job?id=161","http://172.17.0.2:4040/jobs/job?id=162","http://172.17.0.2:4040/jobs/job?id=163","http://172.17.0.2:4040/jobs/job?id=164","http://172.17.0.2:4040/jobs/job?id=165","http://172.17.0.2:4040/jobs/job?id=166","http://172.17.0.2:4040/jobs/job?id=167","http://172.17.0.2:4040/jobs/job?id=168","http://172.17.0.2:4040/jobs/job?id=169","http://172.17.0.2:4040/jobs/job?id=170","http://172.17.0.2:4040/jobs/job?id=171","http://172.17.0.2:4040/jobs/job?id=172","http://172.17.0.2:4040/jobs/job?id=173","http://172.17.0.2:4040/jobs/job?id=174","http://172.17.0.2:4040/jobs/job?id=175","http://172.17.0.2:4040/jobs/job?id=176","http://172.17.0.2:4040/jobs/job?id=177","http://172.17.0.2:4040/jobs/job?id=178","http://172.17.0.2:4040/jobs/job?id=179","http://172.17.0.2:4040/jobs/job?id=180","http://172.17.0.2:4040/jobs/job?id=181","http://172.17.0.2:4040/jobs/job?id=182","http://172.17.0.2:4040/jobs/job?id=183","http://172.17.0.2:4040/jobs/job?id=184","http://172.17.0.2:4040/jobs/job?id=185","http://172.17.0.2:4040/jobs/job?id=186","http://172.17.0.2:4040/jobs/job?id=187","http://172.17.0.2:4040/jobs/job?id=188","http://172.17.0.2:4040/jobs/job?id=189","http://172.17.0.2:4040/jobs/job?id=190","http://172.17.0.2:4040/jobs/job?id=191","http://172.17.0.2:4040/jobs/job?id=192","http://172.17.0.2:4040/jobs/job?id=193","http://172.17.0.2:4040/jobs/job?id=194","http://172.17.0.2:4040/jobs/job?id=195","http://172.17.0.2:4040/jobs/job?id=196","http://172.17.0.2:4040/jobs/job?id=197","http://172.17.0.2:4040/jobs/job?id=198","http://172.17.0.2:4040/jobs/job?id=199","http://172.17.0.2:4040/jobs/job?id=200","http://172.17.0.2:4040/jobs/job?id=201","http://172.17.0.2:4040/jobs/job?id=202","http://172.17.0.2:4040/jobs/job?id=203","http://172.17.0.2:4040/jobs/job?id=204","http://172.17.0.2:4040/jobs/job?id=205","http://172.17.0.2:4040/jobs/job?id=206","http://172.17.0.2:4040/jobs/job?id=207","http://172.17.0.2:4040/jobs/job?id=208"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nfrom pyspark.mllib.evaluation import MulticlassMetrics\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.mllib.evaluation import MultilabelMetrics\nfrom pyspark.mllib.evaluation import MulticlassMetrics, BinaryClassificationMetrics\nfrom pyspark.rdd import RDD\n\nevaluatorRecall = MulticlassClassificationEvaluator(labelCol=\"label_column\", predictionCol=\"prediction\", metricName=\"weightedRecall\")\nevaluatorPrecision = MulticlassClassificationEvaluator(labelCol=\"label_column\", predictionCol=\"prediction\", metricName=\"weightedPrecision\")\nrecall = evaluatorRecall.evaluate(predictions)\nprecision = evaluatorPrecision.evaluate(predictions)\nprint(\"Recall %s\" % recall)\nprint(\"Precision %s\" % precision)","user":"anonymous","dateUpdated":"2020-01-11T17:39:37+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Recall 0.97818902842\nPrecision 0.978062330723\n"}]},"apps":[],"jobName":"paragraph_1578755774562_1804506722","id":"20200111-025301_1394686600","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173","dateFinished":"2020-01-11T17:40:06+0000","dateStarted":"2020-01-11T17:39:38+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=209","http://172.17.0.2:4040/jobs/job?id=210","http://172.17.0.2:4040/jobs/job?id=211","http://172.17.0.2:4040/jobs/job?id=212","http://172.17.0.2:4040/jobs/job?id=213"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.1\ntotalrentals=spark.sql(\"select count(*) as totalrentals from  tmp_view \")\ntotalrentals.show()\navailability_365=spark.sql(\"select count(*) as availability_365 from tmp_view where availability_365=365 \")\navailability_365.show()\n","user":"anonymous","dateUpdated":"2020-01-11T15:24:19+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578755774566_-1087066175","id":"20200111-025554_914758341","dateCreated":"2020-01-11T15:16:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:174","dateFinished":"2020-01-11T15:24:26+0000","dateStarted":"2020-01-11T15:24:19+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+\n|totalrentals|\n+------------+\n|        7921|\n+------------+\n\n+----------------+\n|availability_365|\n+----------------+\n|             843|\n+----------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=7","http://172.17.0.2:4040/jobs/job?id=8"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.2\nneighbourhoodrentals=spark.sql(\"select neighbourhood_group,count(*) as ncount from tmp_view group by neighbourhood_group order by ncount \")\nneighbourhoodrentals.show()\nplotting = neighbourhoodrentals.toPandas()\nhistPlot = plotting.plot.bar(x='neighbourhood_group', y='ncount', color='g')","user":"anonymous","dateUpdated":"2020-01-11T15:28:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":324,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578756259090_1475575148","id":"20200111-152419_1722852636","dateCreated":"2020-01-11T15:24:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1220","dateFinished":"2020-01-11T15:29:00+0000","dateStarted":"2020-01-11T15:28:21+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------+\n|neighbourhood_group|ncount|\n+-------------------+------+\n|            Punggol|     1|\n|            Orchard|     1|\n|        Jurong West|     1|\n|          Sembawang|     1|\n|        Bukit Merah|     1|\n|             Rochor|     1|\n|            Hougang|     1|\n|   Southern Islands|     1|\n|             Museum|     2|\n|      Downtown Core|     2|\n|               null|    14|\n|       North Region|   203|\n|  North-East Region|   344|\n|        East Region|   508|\n|        West Region|   539|\n|     Central Region|  6301|\n+-------------------+------+\n\n<matplotlib.figure.Figure at 0x7fefc9a15650>\n"},{"type":"IMG","data":"\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=12","http://172.17.0.2:4040/jobs/job?id=13","http://172.17.0.2:4040/jobs/job?id=14"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.3\nneighbourhood_group_avg_price=spark.sql(\"select neighbourhood_group, avg(cast(price as float)) as avg_price from tmp_view where room_type = 'Private room' group by neighbourhood_group order by avg_price\")\nneighbourhood_group_avg_price.show()\nplotting = neighbourhood_group_avg_price.toPandas()\nhistPlot = plotting.plot.bar(x='neighbourhood_group', y='avg_price', color='y')\n","user":"anonymous","dateUpdated":"2020-01-11T17:44:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578756386356_37920150","id":"20200111-152626_52519395","dateCreated":"2020-01-11T15:26:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1340","dateFinished":"2020-01-11T15:39:14+0000","dateStarted":"2020-01-11T15:38:33+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|neighbourhood_group|         avg_price|\n+-------------------+------------------+\n|  North-East Region| 80.06296296296296|\n|       North Region| 82.35460992907801|\n|     Central Region|114.47408742676882|\n|        East Region|117.23497267759562|\n|        West Region|117.82539682539682|\n+-------------------+------------------+\n\n\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7fefc99a5650>"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=15","http://172.17.0.2:4040/jobs/job?id=16","http://172.17.0.2:4040/jobs/job?id=17"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.4\navgpricebyneibourhood=spark.sql(\"select neighbourhood_group, neighbourhood,avg(cast(price as float)) as avg_price from tmp_view where room_type = 'Private room' group by neighbourhood_group,neighbourhood order by avg_price desc limit 10\")\navgpricebyneibourhood.show()","user":"anonymous","dateUpdated":"2020-01-11T16:17:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578757113259_-1530932770","id":"20200111-153833_66243980","dateCreated":"2020-01-11T15:38:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1558","dateFinished":"2020-01-11T15:47:53+0000","dateStarted":"2020-01-11T15:47:37+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+----------------+------------------+\n|neighbourhood_group|   neighbourhood|         avg_price|\n+-------------------+----------------+------------------+\n|     Central Region|Southern Islands| 649.6666666666666|\n|     Central Region|    Marina South|             419.0|\n|        West Region|   Bukit Panjang|409.44827586206895|\n|        West Region|     Jurong East|182.25757575757575|\n|     Central Region|   Downtown Core| 163.5047619047619|\n|     Central Region| Singapore River|150.66666666666666|\n|     Central Region|         Orchard|146.89795918367346|\n|     Central Region|       Toa Payoh|            142.78|\n|     Central Region|          Bishan|138.92105263157896|\n|     Central Region|          Outram|135.26639344262296|\n+-------------------+----------------+------------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=18"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.5\nlowest_price_by_roomtype=spark.sql(\"select StRank, host_id, price, room_type, neighbourhood_group, neighbourhood from (SELECT ROW_NUMBER() OVER (PARTITION BY room_type ORDER BY price asc) AS StRank, host_id, price, room_type, neighbourhood_group, neighbourhood FROM tmp_view )  WHERE StRank IN (1,2,3,4,5) and room_type in ('Shared room','Entire home/apt', 'Private room')\")\nlowest_price_by_roomtype.show(100)\n\n","user":"anonymous","dateUpdated":"2020-01-11T17:46:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":388,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578757656924_1184687398","id":"20200111-154736_774916669","dateCreated":"2020-01-11T15:47:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1710","dateFinished":"2020-01-11T16:38:48+0000","dateStarted":"2020-01-11T16:38:34+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+---------+-----+---------------+-------------------+-------------+\n|StRank|  host_id|price|      room_type|neighbourhood_group|neighbourhood|\n+------+---------+-----+---------------+-------------------+-------------+\n|     1| 21900076|   14|    Shared room|        East Region|        Bedok|\n|     2|160839396|   15|    Shared room|        West Region|  Jurong West|\n|     3| 46545593|   18|    Shared room|     Central Region|      Kallang|\n|     4|196709892|   18|    Shared room|     Central Region|       Rochor|\n|     5|  6954638|   19|    Shared room|     Central Region|   Queenstown|\n|     1|114674497|    0|Entire home/apt|     Central Region|       Rochor|\n|     2| 75175440|   14|Entire home/apt|        West Region|Bukit Panjang|\n|     3| 29799617|   14|Entire home/apt|     Central Region|      Geylang|\n|     4| 26246420|   31|Entire home/apt|     Central Region|  Bukit Timah|\n|     5| 73254645|   39|Entire home/apt|       North Region|       Yishun|\n|     1|108408404|   14|   Private room|     Central Region|Marine Parade|\n|     2| 13460992|   15|   Private room|     Central Region|      Geylang|\n|     3| 45343820|   15|   Private room|        East Region|     Tampines|\n|     4| 14021375|   15|   Private room|     Central Region|       Outram|\n|     5| 13503463|   15|   Private room|        West Region|  Jurong West|\n+------+---------+-----+---------------+-------------------+-------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=67","http://172.17.0.2:4040/jobs/job?id=68","http://172.17.0.2:4040/jobs/job?id=69","http://172.17.0.2:4040/jobs/job?id=70","http://172.17.0.2:4040/jobs/job?id=71"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n\n#Q4.6\nimport matplotlib.pyplot as plt\n\nowners = spark.sql(\"select host_id, host_name, COUNT(*) as rentals from tmp_view group by host_id, host_name Order by rentals DESC\")\ntotOwners=owners.count()\nmultiowns = spark.sql(\"select host_id, host_name, COUNT(*) as rentals from tmp_view group by host_id, host_name HAVING rentals>1 Order by rentals DESC\")\nmultiOwners=multiowns.count()\npercentageOfMultipleOwners = (float(multiOwners)/totOwners)*100.0\nprint(\"Percentage of owners own more than one propert: \")\nprint(percentageOfMultipleOwners)\n\nlabels = 'Multiple property owners', 'Single property owners'\nsizes = [percentageOfMultipleOwners, 100 - percentageOfMultipleOwners]\nexplode = (0.1,0)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n","user":"anonymous","dateUpdated":"2020-01-11T17:47:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578759521449_-607222979","id":"20200111-161841_1041455740","dateCreated":"2020-01-11T16:18:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1807","dateFinished":"2020-01-11T16:55:07+0000","dateStarted":"2020-01-11T16:54:15+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Percentage of owners own more than one propert: \n27.3163528977\n\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7fefc9868d90>"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=76","http://172.17.0.2:4040/jobs/job?id=77","http://172.17.0.2:4040/jobs/job?id=78","http://172.17.0.2:4040/jobs/job?id=79"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.7\nmonthlyreview = spark.sql(\"Select month(last_review) month, count(*) as no_of_review from tmp_view where month(last_review) is not null group by month order by month\")\nmonthlyreview.show()\nplotting = monthlyreview.toPandas()\nhistPlot = plotting.plot.bar(x='month', y='no_of_review', color='b')\n","user":"anonymous","dateUpdated":"2020-01-11T17:09:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578761067188_-170423300","id":"20200111-164427_1418057938","dateCreated":"2020-01-11T16:44:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2467","dateFinished":"2020-01-11T17:02:28+0000","dateStarted":"2020-01-11T17:01:54+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+------------+\n|month|no_of_review|\n+-----+------------+\n|    1|         241|\n|    2|         236|\n|    3|         235|\n|    4|         249|\n|    5|         334|\n|    6|         455|\n|    7|         983|\n|    8|        1822|\n|    9|         149|\n|   10|         125|\n|   11|         111|\n|   12|         201|\n+-----+------------+\n\n\n"},{"type":"IMG","data":"\n\n"},{"type":"TEXT","data":"<matplotlib.figure.Figure at 0x7fefc9980450>"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=80","http://172.17.0.2:4040/jobs/job?id=81","http://172.17.0.2:4040/jobs/job?id=82"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n#Q4.8\ndailyOpen = spark.sql(\"Select * from tmp_view where availability_365 =365\")\ndailyOpen.createOrReplaceTempView(\"365_days_open\")\ntop5AvgRentals = spark.sql(\"Select neighbourhood_group, neighbourhood, count(*) as count from 365_days_open where neighbourhood in (Select neighbourhood from 365_days_open Group By neighbourhood_group, neighbourhood order By avg(price) Limit 5) group by neighbourhood_group, neighbourhood\")\n\ntop5AvgRentals.show()","user":"anonymous","dateUpdated":"2020-01-11T17:16:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578762113954_-1853091108","id":"20200111-170153_1650223610","dateCreated":"2020-01-11T17:01:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2675","dateFinished":"2020-01-11T17:17:19+0000","dateStarted":"2020-01-11T17:16:51+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+--------------------+-----+\n|neighbourhood_group|       neighbourhood|count|\n+-------------------+--------------------+-----+\n|        West Region|Western Water Cat...|    1|\n|        West Region|       Bukit Panjang|    1|\n|       North Region|           Woodlands|   12|\n|  North-East Region|           Serangoon|    8|\n|       North Region|        Lim Chu Kang|    1|\n+-------------------+--------------------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=83","http://172.17.0.2:4040/jobs/job?id=84","http://172.17.0.2:4040/jobs/job?id=85","http://172.17.0.2:4040/jobs/job?id=86","http://172.17.0.2:4040/jobs/job?id=87","http://172.17.0.2:4040/jobs/job?id=88"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-01-11T17:16:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578763011187_1977348368","id":"20200111-171651_1435255421","dateCreated":"2020-01-11T17:16:51+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2831"}],"name":"2018386","id":"2EXFPMZEM","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}